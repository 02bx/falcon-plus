#!/bin/bash
## test home
testdir=$(cd $(dirname $0)/; pwd)
## word home
workdir=$(dirname $testdir)
cd $workdir

module=graph
app=falcon-$module
pidfile=var/app.pid
logfile=var/app.log
control=./control
httpprex="127.0.0.1:6071"
rpcprex="127.0.0.1:6070"

## statistics
function statistics(){
    curl -s "$httpprex/statistics/all" | python -m json.tool
}

## config
function config(){
    action=$1
    case $action in
        "reload")
            curl -s "$httpprex/config/reload" | python -m json.tool
            ;;
        *)
            curl -s "$httpprex/config" | python -m json.tool
            ;;
    esac
}

function index_update_all(){
    curl -s "$httpprex/index/updateAll" | python -m json.tool
}

function index_update_one(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    dt="GAUGE"
    step="60"
    curl -s "$httpprex/index/updateOne?EndPoint=$e&Metric=$m&Tags=$tags&DsType=$dt&Step=$step" | python -m json.tool
}

## trace
function trace_recv(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    curl -s "$httpprex/trace/$e/$m/$tags" | python -m json.tool
}

## filter
function filter_recv(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    opt="gt"
    threshhold="50.0"
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    curl -s "$httpprex/filter/$e/$m/$opt/$threshhold/$tags" | python -m json.tool
}

## history
function fetch_history(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    curl -s "$httpprex/history/$e/$m/$tags" | python -m json.tool
}

## last
function fetch_last(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    curl -s "$httpprex/last/$e/$m/$tags" | python -m json.tool
}

## send
function api_send(){
    e="test.graph.endpoint.niean.1"
    m="test.graph.metric.1"
    ts=`date +%s`
    dsType="GAUGE"
    step=60
    value=`expr $ts % 60`
    tags="tag0=tag0-dummy-1,tag1=tag1-dummy-1,tag2=tag2-dummy-1"
    curl -s "$httpprex/api/recv/$e/$m/$ts/$step/$dsType/$value/$tags" | python -m json.tool
}

## tail
function tail_log(){
    $control tail
}

## build
function build(){
    $control build
    [ $? -eq 0 ] && echo -e "build ok" || { echo -e "build error"; exit 1; }
}
function start(){
    $control start
}
function stop(){
    $control kill9
}

## mock
srcname=mocktransfer
appname=$srcname-debug
builddir=$testdir/build
masrc=$testdir/$srcname.go
matarget=$builddir/$appname.bin

function buildm(){
	rm -rf $matarget &&\
	go build -o $matarget $masrc &>/dev/null
    ec=$?
    [ $ec -eq 0 ] && echo -e "build mock, ok" || { echo -e "build mock, error"; exit $ec;}
}

function cleanm(){
    rm -rf $builddir  
    ec=$?
    [ $ec -eq 0 ] && echo -e "clean mock, ok" || { echo -e "clean mock, error"; exit $ec; }
}

function killm(){
    pids=`ps -ef | grep $appname.bin | grep -v grep | awk '{print $2}'`
    for pid in $pids
    do
        kill -9  $pid &>/dev/null
        echo -e "kill mock, $pid"
        sleep 0.01
    done 
    echo -e "kill mock, ok"
}

function startm(){
    cnt=$1
    if [ "X$cnt" == "X" ];then
        cnt=1
    fi

    rpc=$2
    if [ "X$rpc" == "X" ];then
        rpc=$rpcprex
    fi

    step=$3
    if [ "X$step" == "X" ];then
        step=0
    fi

    for i in `seq 1 $cnt`
    do
        id=$rpc.$step.`date +%s`.$i
        $matarget -h $rpc -s $step -i 100 &> $builddir/malog.$id.log &
        echo -e "start mock, $id"
        sleep 0.2
    done
}

action=$1
case $action in
    "build")
        build
        ;;
    "start")
        start
        ;;
    "stop")
        stop
        ;;
    "restart")
        stop && build && start
        ;;
    "config")
        config $2
        ;;
    "index_update_all")
        index_update_all
        ;;
    "index_update_one")
        index_update_one
        ;;
    "trace")
        trace_recv
        ;;
    "filter")
        filter_recv
        ;;
    "history")
        fetch_history
        ;;
    "last")
        fetch_last
        ;;
    "send")
        api_send
        ;;
    "tail")
        tail_log
        ;;
    "startm")
        startm $2 $3 $4
        ;;
    "killm")
        killm
        ;;
    "cleanm")
        cleanm 
        ;;
    "buildm")
        buildm
        ;;
    *)
        statistics
        ;;
esac

